{"totalNumberOfCommits":["1"],"commit 4e13d8278f25dd5261de194eaaa757054d26bdbc":["- A new import statement for the 'Supplier' functional interface has been added to the code.\n  - This was likely added to allow the use of Supplier in the codebase.\n- The 'Supplier' interface is not used anywhere else in the code, so it is unclear what the exact purpose of adding it was.\n- The existing code remains unchanged aside from the added import statement.","- A new line was added to remove empty cartons from a list of cartons.\n- The line of code that was removed was not relevant to the functionality of the method.\n\nThe change was made to optimize the code by removing empty cartons from the list, which increases the efficiency of building a sundae from the non-empty cartons. This change improves the performance of the program and makes it more user-friendly.","- Added a method call to the \"forEach()\" method\n- The lambda expression method \"c -> sundae.addScoop(c.getFlavor())\" is used as an argument for the \"forEach()\" method\n- Each flavor remaining in cartons is being added as a scoop to a sundae\n- This change was made in Phase 2 of development\n\nReason for Changes:\n- This change increases efficiency by using a concise method call instead of a longer loop\n- The lambda expression allows for easier manipulation of the data and more readable code.","- A new lambda expression was added to the `map()` method.\n- The `RecipeConverter` class is used to convert `Recipe` objects to `Queue<Ingredient>` objects.\n- The previous hard-coded list of `Queue<Ingredient>` was replaced with the new list created by `map()`.\n- This change allows for a dynamic conversion of `Recipe` objects to `Queue<Ingredient>` objects.\n- The new implementation is more scalable and flexible as it can handle any number of `Recipe` objects.","- The code is part of the IceCreamMaker class.\n- The while loop continuously executes until a certain condition is met.\n- An ingredient variable is created and initialized to null.\n- The code checks if the ingredient variable is null.\n- If the ingredient variable is null, the loop is broken.\n- The line of code initializing the ingredient variable to null is removed.\n- The ingredient variable is now assigned the value returned by the ingredientSupplier.get() method.\n- The change replaces the manually assigned null value with a dynamic value returned by the ingredientSupplier.","- Nothing was removed from the original code.\n\n+ A new import statement for \"RecipeConverter\" was added.\n\n- No changes were made to the existing import statements.\n\n+ A new exception class, \"CartonCreationFailedException\", was added.\n\n- No changes were made to the existing exception classes.\n\n+ \"RecipeConverter\" was added to the list of classes being used in the package.\n\n- No changes were made to the existing classes being used.\n\nThe changes in this code seem to be focused on adding a new class to the package and updating the necessary import statements to allow for its use. Additionally, a new exception class was added to handle cases where carton creation fails.","- A new object of type Supplier<Ingredient> is created using the ingredients queue's poll() method.\n- The new ingredientSupplier object is provided as an argument to the iceCreamMaker.prepareIceCreamCarton() method call.\n- The null argument that was previously provided to the prepareIceCreamCarton() method has been removed.\n- The number of cartons created is incremented if the prepareIceCreamCarton() method returns true.\n\nReasoning:\n- A new Supplier object is created to provide the ice cream maker with an uninterrupted stream of ingredients to prepare the cartons.\n- The removal of the null argument and the addition of the Supplier argument allows the prepareIceCreamCarton() method to receive a continuous stream of ingredients.\n- Incrementing the number of cartons created allows the tracking of the progress of ice cream production."]}